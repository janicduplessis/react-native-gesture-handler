"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"2.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Fundamentals","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Introduction","href":"/react-native-gesture-handler/docs/","docId":"fundamentals/introduction"},{"type":"link","label":"Installation","href":"/react-native-gesture-handler/docs/fundamentals/installation","docId":"fundamentals/installation"},{"type":"link","label":"Quick start","href":"/react-native-gesture-handler/docs/fundamentals/quickstart/","docId":"fundamentals/quickstart/quickstart"},{"type":"link","label":"Gesture composition & interactions","href":"/react-native-gesture-handler/docs/fundamentals/gesture-composition","docId":"fundamentals/gesture-composition"},{"type":"link","label":"Manual gestures","href":"/react-native-gesture-handler/docs/fundamentals/manual-gestures/","docId":"fundamentals/manual-gestures/manual-gestures"},{"type":"link","label":"Gesture states & events","href":"/react-native-gesture-handler/docs/fundamentals/states-events","docId":"fundamentals/states-events"}],"href":"/react-native-gesture-handler/docs/category/fundamentals"},{"type":"category","label":"Gestures","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Gesture detector","href":"/react-native-gesture-handler/docs/gestures/gesture-detector","docId":"gestures/gesture-detector"},{"type":"link","label":"Gesture","href":"/react-native-gesture-handler/docs/gestures/gesture","docId":"gestures/gesture"},{"type":"link","label":"Pan gesture","href":"/react-native-gesture-handler/docs/gestures/pan-gesture","docId":"gestures/pan-gesture"},{"type":"link","label":"Tap gesture","href":"/react-native-gesture-handler/docs/gestures/tap-gesture","docId":"gestures/tap-gesture"},{"type":"link","label":"Long press gesture","href":"/react-native-gesture-handler/docs/gestures/long-press-gesture","docId":"gestures/long-press-gesture"},{"type":"link","label":"Rotation gesture","href":"/react-native-gesture-handler/docs/gestures/rotation-gesture","docId":"gestures/rotation-gesture"},{"type":"link","label":"Pinch gesture","href":"/react-native-gesture-handler/docs/gestures/pinch-gesture","docId":"gestures/pinch-gesture"},{"type":"link","label":"Fling gesture","href":"/react-native-gesture-handler/docs/gestures/fling-gesture","docId":"gestures/fling-gesture"},{"type":"link","label":"Hover gesture","href":"/react-native-gesture-handler/docs/gestures/hover-gesture","docId":"gestures/hover-gesture"},{"type":"link","label":"Force touch gesture","href":"/react-native-gesture-handler/docs/gestures/force-touch-gesture","docId":"gestures/force-touch-gesture"},{"type":"link","label":"Native gesture","href":"/react-native-gesture-handler/docs/gestures/native-gesture","docId":"gestures/native-gesture"},{"type":"link","label":"Manual gesture","href":"/react-native-gesture-handler/docs/gestures/manual-gesture","docId":"gestures/manual-gesture"},{"type":"link","label":"Composed gestures","href":"/react-native-gesture-handler/docs/gestures/composed-gestures","docId":"gestures/composed-gestures"},{"type":"link","label":"Touch events","href":"/react-native-gesture-handler/docs/gestures/touch-events","docId":"gestures/touch-events"},{"type":"link","label":"Gesture state manager","href":"/react-native-gesture-handler/docs/gestures/state-manager","docId":"gestures/state-manager"}],"href":"/react-native-gesture-handler/docs/category/gestures"},{"type":"category","label":"Components","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Buttons","href":"/react-native-gesture-handler/docs/components/buttons","docId":"components/buttons"},{"type":"link","label":"DrawerLayout","href":"/react-native-gesture-handler/docs/components/drawer-layout","docId":"components/drawer-layout"},{"type":"link","label":"Swipeable","href":"/react-native-gesture-handler/docs/components/swipeable","docId":"components/swipeable"},{"type":"link","label":"Touchables","href":"/react-native-gesture-handler/docs/components/touchables","docId":"components/touchables"}],"href":"/react-native-gesture-handler/docs/category/components"},{"type":"category","label":"Gesture handlers (legacy)","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"About Gesture Handlers","href":"/react-native-gesture-handler/docs/gesture-handlers/about-handlers","docId":"gesture-handlers/about-handlers"},{"type":"link","label":"Cross handler interactions","href":"/react-native-gesture-handler/docs/gesture-handlers/interactions","docId":"gesture-handlers/interactions"},{"type":"link","label":"Common handler properties","href":"/react-native-gesture-handler/docs/gesture-handlers/common-gh","docId":"gesture-handlers/common-gh"},{"type":"link","label":"Pan","href":"/react-native-gesture-handler/docs/gesture-handlers/pan-gh","docId":"gesture-handlers/pan-gh"},{"type":"link","label":"Tap","href":"/react-native-gesture-handler/docs/gesture-handlers/tap-gh","docId":"gesture-handlers/tap-gh"},{"type":"link","label":"Long press","href":"/react-native-gesture-handler/docs/gesture-handlers/longpress-gh","docId":"gesture-handlers/longpress-gh"},{"type":"link","label":"Rotation","href":"/react-native-gesture-handler/docs/gesture-handlers/rotation-gh","docId":"gesture-handlers/rotation-gh"},{"type":"link","label":"Fling","href":"/react-native-gesture-handler/docs/gesture-handlers/fling-gh","docId":"gesture-handlers/fling-gh"},{"type":"link","label":"Pinch","href":"/react-native-gesture-handler/docs/gesture-handlers/pinch-gh","docId":"gesture-handlers/pinch-gh"},{"type":"link","label":"Force touch","href":"/react-native-gesture-handler/docs/gesture-handlers/force-gh","docId":"gesture-handlers/force-gh"},{"type":"link","label":"NativeView","href":"/react-native-gesture-handler/docs/gesture-handlers/nativeview-gh","docId":"gesture-handlers/nativeview-gh"},{"type":"link","label":"createNativeWrapper()","href":"/react-native-gesture-handler/docs/gesture-handlers/create-native-wrapper","docId":"gesture-handlers/create-native-wrapper"}],"href":"/react-native-gesture-handler/docs/category/gesture-handlers-legacy"},{"type":"category","label":"Guides","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Troubleshooting","href":"/react-native-gesture-handler/docs/guides/troubleshooting","docId":"guides/troubleshooting"},{"type":"link","label":"Migrating off RNGHEnabledRootView","href":"/react-native-gesture-handler/docs/guides/migrating-off-rnghenabledroot","docId":"guides/migrating-off-rnghenabledroot"},{"type":"link","label":"Testing with Jest","href":"/react-native-gesture-handler/docs/guides/testing","docId":"guides/testing"},{"type":"link","label":"Upgrading to the new API introduced in Gesture Handler 2","href":"/react-native-gesture-handler/docs/guides/upgrading-to-2","docId":"guides/upgrading-to-2"}],"href":"/react-native-gesture-handler/docs/category/guides"},{"type":"category","label":"Under the hood","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"How does it work?","href":"/react-native-gesture-handler/docs/under-the-hood/how-does-it-work","docId":"under-the-hood/how-does-it-work"},{"type":"link","label":"Handler State","href":"/react-native-gesture-handler/docs/under-the-hood/state","docId":"under-the-hood/state"}],"href":"/react-native-gesture-handler/docs/category/under-the-hood"}]},"docs":{"components/buttons":{"id":"components/buttons","title":"Buttons","description":"Gesture handler library provides native components that can act as buttons. These can be treated as a replacement to TouchableHighlight or TouchableOpacity from RN core. Gesture handler\'s buttons recognize touches in native which makes the recognition process deterministic, allows for rendering ripples on Android in highly performant way (TouchableNativeFeedback requires that touch event does a roundtrip to JS before we can update ripple effect, which makes ripples lag a bit on older phones), and provides native and platform default interaction for buttons that are placed in a scrollable container (in which case the interaction is slightly delayed to prevent button from highlighting when you fling).","sidebar":"tutorialSidebar"},"components/drawer-layout":{"id":"components/drawer-layout","title":"Drawer Layout","description":"This is a cross-platform replacement for React Native\'s DrawerLayoutAndroid component. It provides a compatible API but allows for the component to be used on both Android and iOS. Please refer to React Native docs for the detailed usage for standard parameters.","sidebar":"tutorialSidebar"},"components/swipeable":{"id":"components/swipeable","title":"Swipeable","description":"This component allows for implementing swipeable rows or similar interaction. It renders its children within a panable container allows for horizontal swiping left and right. While swiping one of two \\"action\\" containers can be shown depends on whether user swipes left or right (containers can be rendered by renderLeftActions or renderRightActions props).","sidebar":"tutorialSidebar"},"components/touchables":{"id":"components/touchables","title":"Touchables","description":"Gesture Handler library provides an implementation of RN\'s touchable components that are based on native buttons and does not rely on JS responder system utilized by RN. Our touchable implementation follows the same API and aims to be a drop-in replacement for touchables available in React Native.","sidebar":"tutorialSidebar"},"fundamentals/gesture-composition":{"id":"fundamentals/gesture-composition","title":"Gesture composition & interactions","description":"Composing gestures is much simpler in RNGH2, you don\'t need to create a ref for every gesture that depends on another one. Instead you can use Race, Simultaneous and Exclusive methods provided by the Gesture object.","sidebar":"tutorialSidebar"},"fundamentals/installation":{"id":"fundamentals/installation","title":"Installation","description":"Requirements","sidebar":"tutorialSidebar"},"fundamentals/introduction":{"id":"fundamentals/introduction","title":"Introduction","description":"Gesture Handler aims to replace React Native\'s built in touch system called Gesture Responder System.","sidebar":"tutorialSidebar"},"fundamentals/manual-gestures/manual-gestures":{"id":"fundamentals/manual-gestures/manual-gestures","title":"Manual gestures","description":"RNGH2 finally brings one of the most requested features: manual gestures and touch events. To demonstrate how to make a manual gesture we will make a simple one that tracks all pointers on the screen.","sidebar":"tutorialSidebar"},"fundamentals/quickstart/quickstart":{"id":"fundamentals/quickstart/quickstart","title":"Quick start","description":"RNGH2 provides much simpler way to add gestures to your app. All you need to do is wrap the view that you want your gesture to work on with GestureDetector, define the gesture and pass it to detector. That\'s all!","sidebar":"tutorialSidebar"},"fundamentals/states-events":{"id":"fundamentals/states-events","title":"Gesture states & events","description":"Every gesture can be treated as \\"state machine\\".","sidebar":"tutorialSidebar"},"gesture-handlers/about-handlers":{"id":"gesture-handlers/about-handlers","title":"About Gesture Handlers","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/common-gh":{"id":"gesture-handlers/common-gh","title":"Common handler properties","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/create-native-wrapper":{"id":"gesture-handlers/create-native-wrapper","title":"createNativeWrapper","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/fling-gh":{"id":"gesture-handlers/fling-gh","title":"FlingGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/force-gh":{"id":"gesture-handlers/force-gh","title":"ForceTouchGestureHandler (iOS only)","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/interactions":{"id":"gesture-handlers/interactions","title":"Cross handler interactions","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/longpress-gh":{"id":"gesture-handlers/longpress-gh","title":"LongPressGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/nativeview-gh":{"id":"gesture-handlers/nativeview-gh","title":"NativeViewGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/pan-gh":{"id":"gesture-handlers/pan-gh","title":"PanGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/pinch-gh":{"id":"gesture-handlers/pinch-gh","title":"PinchGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/rotation-gh":{"id":"gesture-handlers/rotation-gh","title":"RotationGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gesture-handlers/tap-gh":{"id":"gesture-handlers/tap-gh","title":"TapGestureHandler","description":"Consider using the new gestures API instead. The old API is not actively supported and is not receiving the new features. Check out RNGH 2.0 section in Introduction for more information.","sidebar":"tutorialSidebar"},"gestures/composed-gestures":{"id":"gestures/composed-gestures","title":"Composed gestures","description":"Composed gestures (Race, Simultaneous, Exclusive) provide a simple way of building relations between gestures.","sidebar":"tutorialSidebar"},"gestures/fling-gesture":{"id":"gestures/fling-gesture","title":"Fling gesture","description":"A discrete gesture that activates when the movement is sufficiently long and fast.","sidebar":"tutorialSidebar"},"gestures/force-touch-gesture":{"id":"gestures/force-touch-gesture","title":"Force touch gesture (iOS only)","description":"A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.","sidebar":"tutorialSidebar"},"gestures/gesture":{"id":"gestures/gesture","title":"Gesture","description":"Gesture is the object that allows you to create and compose gestures.","sidebar":"tutorialSidebar"},"gestures/gesture-detector":{"id":"gestures/gesture-detector","title":"GestureDetector","description":"GestureDetector is the main component of the RNGH2. It is responsible for creating and updating native gesture handlers based on the config of provided gesture. The most significant difference between it and old gesture handlers is that the GestureDetector can recognize more than one gesture at the time thanks to gesture composition. Keep in mind that GestureDetector is not compatible with the Animated API, nor with Reanimated 1.","sidebar":"tutorialSidebar"},"gestures/hover-gesture":{"id":"gestures/hover-gesture","title":"Hover gesture","description":"A continuous gesture that can recognize hovering above the view it\'s attached to. The hover effect may be activated by moving a mouse or a stylus over the view.","sidebar":"tutorialSidebar"},"gestures/long-press-gesture":{"id":"gestures/long-press-gesture","title":"Long press gesture","description":"A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.","sidebar":"tutorialSidebar"},"gestures/manual-gesture":{"id":"gestures/manual-gesture","title":"Manual gesture","description":"A plain gesture that has no specific activation criteria nor event data set. Its state has to be controlled manually using a state manager. It will not fail when all the pointers are lifted from the screen.","sidebar":"tutorialSidebar"},"gestures/native-gesture":{"id":"gestures/native-gesture","title":"Native gesture","description":"A gesture that allows other touch handling components to participate in RNGH\'s gesture system. When used, the other component should be the direct child of a GestureDetector.","sidebar":"tutorialSidebar"},"gestures/pan-gesture":{"id":"gestures/pan-gesture","title":"Pan gesture","description":"A continuous gesture that can recognize a panning (dragging) gesture and track its movement.","sidebar":"tutorialSidebar"},"gestures/pinch-gesture":{"id":"gestures/pinch-gesture","title":"Pinch gesture","description":"A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.","sidebar":"tutorialSidebar"},"gestures/rotation-gesture":{"id":"gestures/rotation-gesture","title":"Rotation gesture","description":"A continuous gesture that can recognize a rotation gesture and track its movement.","sidebar":"tutorialSidebar"},"gestures/state-manager":{"id":"gestures/state-manager","title":"Gesture state manager","description":"GestureStateManager allows to manually control the state of the gestures. Please note that react-native-reanimated is required to use it, since it allows for synchronously executing methods in worklets.","sidebar":"tutorialSidebar"},"gestures/tap-gesture":{"id":"gestures/tap-gesture","title":"Tap gesture","description":"A discrete gesture that recognizes one or many taps.","sidebar":"tutorialSidebar"},"gestures/touch-events":{"id":"gestures/touch-events","title":"Touch events","description":"Touch event attributes:","sidebar":"tutorialSidebar"},"guides/migrating-off-rnghenabledroot":{"id":"guides/migrating-off-rnghenabledroot","title":"Migrating off RNGHEnabledRootView","description":"Update MainActivity.java","sidebar":"tutorialSidebar"},"guides/testing":{"id":"guides/testing","title":"Testing with Jest","description":"Mocking native modules","sidebar":"tutorialSidebar"},"guides/troubleshooting":{"id":"guides/troubleshooting","title":"Troubleshooting","description":"Troubleshooting","sidebar":"tutorialSidebar"},"guides/upgrading-to-2":{"id":"guides/upgrading-to-2","title":"Upgrading to the new API introduced in Gesture Handler 2","description":"Make sure to migrate off the RNGestureHandlerEnabledRootView (Android only)","sidebar":"tutorialSidebar"},"under-the-hood/how-does-it-work":{"id":"under-the-hood/how-does-it-work","title":"How does it work?","description":"Units","sidebar":"tutorialSidebar"},"under-the-hood/state":{"id":"under-the-hood/state","title":"Handler State","description":"As described in \\"About Gesture Handlers\\", gesture handlers can be treated as \\"state machines\\".","sidebar":"tutorialSidebar"}}}')}}]);