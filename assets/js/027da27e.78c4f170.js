"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[1613],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=s(a),d=r,m=h["".concat(c,".").concat(d)]||h[d]||p[d]||o;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},1132:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var n=a(3117),r=(a(7294),a(3905));const o={id:"touchables",title:"Touchables",sidebar_label:"Touchables"},i=void 0,l={unversionedId:"components/touchables",id:"components/touchables",title:"Touchables",description:"Gesture Handler library provides an implementation of RN's touchable components that are based on native buttons and does not rely on JS responder system utilized by RN. Our touchable implementation follows the same API and aims to be a drop-in replacement for touchables available in React Native.",source:"@site/docs/components/touchables.md",sourceDirName:"components",slug:"/components/touchables",permalink:"/react-native-gesture-handler/docs/components/touchables",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/components/touchables.md",tags:[],version:"current",frontMatter:{id:"touchables",title:"Touchables",sidebar_label:"Touchables"},sidebar:"tutorialSidebar",previous:{title:"Swipeable",permalink:"/react-native-gesture-handler/docs/components/swipeable"},next:{title:"Gesture handlers (legacy)",permalink:"/react-native-gesture-handler/docs/category/gesture-handlers-legacy"}},c={},s=[{value:"Example:",id:"example",level:3}],u={toc:s};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Gesture Handler library provides an implementation of RN's touchable components that are based on ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/components/buttons"},"native buttons")," and does not rely on JS responder system utilized by RN. Our touchable implementation follows the same API and aims to be a drop-in replacement for touchables available in React Native."),(0,r.kt)("p",null,"React Native's touchables API can be found here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/touchablenativefeedback"},"Touchable Native Feedback")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/touchablehighlight"},"Touchable Highlight")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/touchableopacity"},"Touchable Opacity")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/touchablewithoutfeedback"},"Touchable Without Feedback"))),(0,r.kt)("p",null,"All major touchable properties (except from ",(0,r.kt)("inlineCode",{parentName:"p"},"pressRetentionOffset"),") have been adopted and should behave in a similar way as with RN's touchables."),(0,r.kt)("p",null,"The motivation for using RNGH touchables as a replacement for these imported from React Native is to follow built-in native behavior more closely by utilizing platform native touch system instead of relying on the JS responder system.\nThese touchables and their feedback behavior are deeply integrated with native\ngesture ecosystem and could be connected with other native components (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"ScrollView"),") and Gesture Handlers easily and in a more predictable way, which\nfollows native apps' behavior."),(0,r.kt)("p",null,"Our intention was to make switch for these touchables as simple as possible. In order to use RNGH's touchables the only thing you need to do is to change library from which you import touchable components.\nneed only to change imports of touchables."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Gesture Handler's TouchableOpacity uses native driver for animations by default. If this causes problems for you, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"useNativeAnimations")," prop to false.")),(0,r.kt)("h3",{id:"example"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native';\n")),(0,r.kt)("p",null,"has to be replaced with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n} from 'react-native-gesture-handler';\n")),(0,r.kt)("p",null,"For a comparison of both touchable implementations see our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-gesture-handler/blob/main/example/src/release_tests/touchables/index.tsx"},"touchables example")))}p.isMDXComponent=!0}}]);