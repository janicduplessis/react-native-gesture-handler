{"version":3,"sources":["ReanimatedSwipeable.tsx"],"names":["React","forwardRef","useCallback","useImperativeHandle","useRef","GestureObjects","Gesture","GestureDetector","Animated","interpolate","runOnJS","useAnimatedStyle","useSharedValue","withSpring","I18nManager","StyleSheet","View","DRAG_TOSS","SwipeDirection","Swipeable","props","ref","leftThreshold","rightThreshold","onSwipeableOpenStartDrag","onSwipeableCloseStartDrag","enableTrackpadTwoFingerGesture","enabled","containerStyle","childrenContainerStyle","animationOptions","overshootLeft","overshootRight","onSwipeableWillOpen","onSwipeableWillClose","onSwipeableOpen","onSwipeableClose","testID","remainingProps","rowState","userDrag","appliedTranslation","rowWidth","leftWidth","rightWidth","rightOffset","showLeftProgress","showRightProgress","swipeableMethods","close","openLeft","openRight","reset","defaultProps","friction","overshootFriction","overshootLeftProp","overshootRightProp","updateRightElementWidth","value","Math","max","updateAnimatedEvent","startOffset","offsetDrag","dispatchImmediateEvents","fromValue","toValue","RIGHT","LEFT","dispatchEndEvents","current","animationOptionsProp","animateRow","velocityX","translationSpringConfig","duration","dampingRatio","stiffness","velocity","overshootClamping","isClosing","moveToRight","usedWidth","progressSpringConfig","restDisplacementThreshold","restSpeedThreshold","frozenRowState","isFinished","progressTarget","sign","onRowLayout","nativeEvent","layout","width","children","renderLeftActions","renderRightActions","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","leftElement","styles","leftActions","x","rightElement","rightActions","leftThresholdProp","rightThresholdProp","handleRelease","event","translationX","tapGesture","Tap","onStart","dragStarted","panGesture","Pan","onUpdate","direction","onEnd","onFinalize","activeOffsetX","shouldCancelWhenOutside","animatedStyle","transform","translateX","pointerEvents","swipeableComponent","container","create","overflow","absoluteFillObject","flexDirection","isRTL"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\nimport {\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../handlers/gestureHandlerCommon';\nimport type { PanGestureHandlerProps } from '../handlers/PanGestureHandler';\nimport type { PanGestureHandlerEventPayload } from '../handlers/GestureHandlerEventPayload';\nimport Animated, {\n  SharedValue,\n  interpolate,\n  runOnJS,\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\nimport {\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nenum SwipeDirection {\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT,\n    swipeable: SwipeableMethods\n  ) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT,\n    swipeable: SwipeableMethods\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * `progress`: Equals `0` when `swipeable` is closed, `1` when `swipeable` is opened.\n   *  - When the element overshoots it's opened position the value tends towards `Infinity`.\n   *  - Goes back to `1` when `swipeable` is released.\n   *\n   * `translation`: a horizontal offset of the `swipeable` relative to its closed position.\\\n   * `swipeableMethods`: provides an object exposing methods for controlling the `swipeable`.\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progress: SharedValue<number>,\n    translation: SharedValue<number>,\n    swipeableMethods: SwipeableMethods\n  ) => React.ReactNode;\n\n  /**\n   * `progress`: Equals `0` when `swipeable` is closed, `1` when `swipeable` is opened.\n   *  - When the element overshoots it's opened position the value tends towards `Infinity`.\n   *  - Goes back to `1` when `swipeable` is released.\n   *\n   * `translation`: a horizontal offset of the `swipeable` relative to its closed position.\\\n   * `swipeableMethods`: provides an object exposing methods for controlling the `swipeable`.\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progress: SharedValue<number>,\n    translation: SharedValue<number>,\n    swipeableMethods: SwipeableMethods\n  ) => React.ReactNode;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\nexport interface SwipeableMethods {\n  close: () => void;\n  openLeft: () => void;\n  openRight: () => void;\n  reset: () => void;\n}\n\nconst Swipeable = forwardRef<SwipeableMethods, SwipeableProps>(\n  function Swipeable(\n    props: SwipeableProps,\n    ref: ForwardedRef<SwipeableMethods>\n  ) {\n    const {\n      leftThreshold,\n      rightThreshold,\n      onSwipeableOpenStartDrag,\n      onSwipeableCloseStartDrag,\n      enableTrackpadTwoFingerGesture,\n      enabled,\n      containerStyle,\n      childrenContainerStyle,\n      animationOptions,\n      overshootLeft,\n      overshootRight,\n      onSwipeableWillOpen,\n      onSwipeableWillClose,\n      onSwipeableOpen,\n      onSwipeableClose,\n      testID,\n      ...remainingProps\n    } = props;\n\n    const rowState = useSharedValue<number>(0);\n\n    const userDrag = useSharedValue<number>(0);\n    const appliedTranslation = useSharedValue<number>(0);\n\n    const rowWidth = useSharedValue<number>(0);\n    const leftWidth = useSharedValue<number>(0);\n    const rightWidth = useSharedValue<number>(0);\n    const rightOffset = useSharedValue<number | null>(null);\n\n    const showLeftProgress = useSharedValue<number>(0);\n    const showRightProgress = useSharedValue<number>(0);\n\n    const swipeableMethods = useRef<SwipeableMethods>({\n      close: () => {\n        'worklet';\n      },\n      openLeft: () => {\n        'worklet';\n      },\n      openRight: () => {\n        'worklet';\n      },\n      reset: () => {\n        'worklet';\n      },\n    });\n\n    const defaultProps = {\n      friction: 1,\n      overshootFriction: 1,\n    };\n\n    const {\n      friction = defaultProps.friction,\n      overshootFriction = defaultProps.overshootFriction,\n    } = props;\n\n    const overshootLeftProp = overshootLeft;\n    const overshootRightProp = overshootRight;\n\n    const updateRightElementWidth = () => {\n      'worklet';\n      if (rightOffset.value === null) {\n        rightOffset.value = rowWidth.value;\n      }\n      rightWidth.value = Math.max(0, rowWidth.value - rightOffset.value);\n    };\n\n    const updateAnimatedEvent = () => {\n      'worklet';\n\n      updateRightElementWidth();\n\n      const overshootLeft = overshootLeftProp ?? leftWidth.value > 0;\n      const overshootRight = overshootRightProp ?? rightWidth.value > 0;\n\n      const startOffset =\n        rowState.value === 1\n          ? leftWidth.value\n          : rowState.value === -1\n          ? -rightWidth.value\n          : 0;\n\n      const offsetDrag = userDrag.value / friction + startOffset;\n\n      appliedTranslation.value = interpolate(\n        offsetDrag,\n        [\n          -rightWidth.value - 1,\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + 1,\n        ],\n        [\n          -rightWidth.value - (overshootRight ? 1 / overshootFriction : 0),\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + (overshootLeft ? 1 / overshootFriction : 0),\n        ]\n      );\n\n      showLeftProgress.value =\n        leftWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-1, 0, leftWidth.value],\n              [0, 0, 1]\n            )\n          : 0;\n\n      showRightProgress.value =\n        rightWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-rightWidth.value, 0, 1],\n              [1, 0, 0]\n            )\n          : 0;\n    };\n\n    const dispatchImmediateEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        if (toValue > 0) {\n          onSwipeableWillOpen?.(SwipeDirection.RIGHT);\n        } else if (toValue < 0) {\n          onSwipeableWillOpen?.(SwipeDirection.LEFT);\n        } else {\n          onSwipeableWillClose?.(\n            fromValue > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT\n          );\n        }\n      },\n      [onSwipeableWillClose, onSwipeableWillOpen]\n    );\n\n    const dispatchEndEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        if (toValue > 0) {\n          onSwipeableOpen?.(SwipeDirection.RIGHT, swipeableMethods.current);\n        } else if (toValue < 0) {\n          onSwipeableOpen?.(SwipeDirection.LEFT, swipeableMethods.current);\n        } else {\n          onSwipeableClose?.(\n            fromValue > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT,\n            swipeableMethods.current\n          );\n        }\n      },\n      [onSwipeableClose, onSwipeableOpen]\n    );\n\n    const animationOptionsProp = animationOptions;\n\n    const animateRow = useCallback(\n      (toValue: number, velocityX?: number) => {\n        'worklet';\n\n        const translationSpringConfig = {\n          duration: 1000,\n          dampingRatio: 0.9,\n          stiffness: 500,\n          velocity: velocityX,\n          overshootClamping: true,\n          ...animationOptionsProp,\n        };\n\n        const isClosing = toValue === 0;\n        const moveToRight = isClosing ? rowState.value < 0 : toValue > 0;\n\n        const usedWidth = isClosing\n          ? moveToRight\n            ? rightWidth.value\n            : leftWidth.value\n          : moveToRight\n          ? leftWidth.value\n          : rightWidth.value;\n\n        const progressSpringConfig = {\n          ...translationSpringConfig,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          velocity:\n            velocityX &&\n            interpolate(velocityX, [-usedWidth, usedWidth], [-1, 1]),\n        };\n\n        const frozenRowState = rowState.value;\n\n        appliedTranslation.value = withSpring(\n          toValue,\n          translationSpringConfig,\n          (isFinished) => {\n            if (isFinished) {\n              runOnJS(dispatchEndEvents)(frozenRowState, toValue);\n            }\n          }\n        );\n\n        const progressTarget = toValue === 0 ? 0 : 1;\n\n        showLeftProgress.value =\n          leftWidth.value > 0\n            ? withSpring(progressTarget, progressSpringConfig)\n            : 0;\n        showRightProgress.value =\n          rightWidth.value > 0\n            ? withSpring(progressTarget, progressSpringConfig)\n            : 0;\n\n        runOnJS(dispatchImmediateEvents)(frozenRowState, toValue);\n\n        rowState.value = Math.sign(toValue);\n      },\n      [\n        rowState,\n        animationOptionsProp,\n        appliedTranslation,\n        showLeftProgress,\n        leftWidth.value,\n        showRightProgress,\n        rightWidth.value,\n        dispatchImmediateEvents,\n        dispatchEndEvents,\n      ]\n    );\n\n    const onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n      rowWidth.value = nativeEvent.layout.width;\n    };\n\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = props;\n\n    swipeableMethods.current = {\n      close() {\n        'worklet';\n        animateRow(0);\n      },\n      openLeft() {\n        'worklet';\n        animateRow(leftWidth.value);\n      },\n      openRight() {\n        'worklet';\n        animateRow(-rightWidth.value);\n      },\n      reset() {\n        'worklet';\n        userDrag.value = 0;\n        showLeftProgress.value = 0;\n        appliedTranslation.value = 0;\n        rowState.value = 0;\n      },\n    };\n\n    const leftElement = renderLeftActions && (\n      <Animated.View style={[styles.leftActions]}>\n        {renderLeftActions(\n          showLeftProgress,\n          appliedTranslation,\n          swipeableMethods.current\n        )}\n        <View\n          onLayout={({ nativeEvent }) =>\n            (leftWidth.value = nativeEvent.layout.x)\n          }\n        />\n      </Animated.View>\n    );\n\n    const rightElement = renderRightActions && (\n      <Animated.View style={[styles.rightActions]}>\n        {renderRightActions(\n          showRightProgress,\n          appliedTranslation,\n          swipeableMethods.current\n        )}\n        <View\n          onLayout={({ nativeEvent }) =>\n            (rightOffset.value = nativeEvent.layout.x)\n          }\n        />\n      </Animated.View>\n    );\n\n    const leftThresholdProp = leftThreshold;\n    const rightThresholdProp = rightThreshold;\n\n    const handleRelease = (\n      event: GestureStateChangeEvent<PanGestureHandlerEventPayload>\n    ) => {\n      'worklet';\n      const { velocityX } = event;\n      userDrag.value = event.translationX;\n\n      updateRightElementWidth();\n\n      const leftThreshold = leftThresholdProp ?? leftWidth.value / 2;\n      const rightThreshold = rightThresholdProp ?? rightWidth.value / 2;\n\n      const translationX = (userDrag.value + DRAG_TOSS * velocityX) / friction;\n\n      let toValue = 0;\n\n      if (rowState.value === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth.value;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth.value;\n        }\n      } else if (rowState.value === 1) {\n        // Swiped to left\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth.value;\n        }\n      } else {\n        // Swiped to right\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth.value;\n        }\n      }\n\n      animateRow(toValue, velocityX / friction);\n    };\n\n    const close = () => {\n      'worklet';\n      animateRow(0);\n    };\n\n    const tapGesture = Gesture.Tap().onStart(() => {\n      if (rowState.value !== 0) {\n        close();\n      }\n    });\n\n    const dragStarted = useSharedValue<boolean>(false);\n\n    const panGesture = Gesture.Pan()\n      .onUpdate((event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => {\n        userDrag.value = event.translationX;\n\n        const direction =\n          rowState.value === -1\n            ? SwipeDirection.RIGHT\n            : rowState.value === 1\n            ? SwipeDirection.LEFT\n            : event.translationX > 0\n            ? SwipeDirection.RIGHT\n            : SwipeDirection.LEFT;\n\n        if (!dragStarted.value) {\n          dragStarted.value = true;\n          if (rowState.value === 0 && onSwipeableOpenStartDrag) {\n            runOnJS(onSwipeableOpenStartDrag)(direction);\n          } else if (rowState.value !== 0 && onSwipeableCloseStartDrag) {\n            runOnJS(onSwipeableCloseStartDrag)(direction);\n          }\n        }\n\n        updateAnimatedEvent();\n      })\n      .onEnd(\n        (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n          handleRelease(event);\n        }\n      )\n      .onFinalize(() => {\n        dragStarted.value = false;\n      });\n\n    if (enableTrackpadTwoFingerGesture) {\n      panGesture.enableTrackpadTwoFingerGesture(enableTrackpadTwoFingerGesture);\n    }\n\n    panGesture.activeOffsetX([\n      -dragOffsetFromRightEdge,\n      dragOffsetFromLeftEdge,\n    ]);\n    tapGesture.shouldCancelWhenOutside(true);\n\n    useImperativeHandle(ref, () => swipeableMethods.current, [\n      swipeableMethods,\n    ]);\n\n    panGesture.enabled(enabled !== false);\n\n    const animatedStyle = useAnimatedStyle(\n      () => ({\n        transform: [{ translateX: appliedTranslation.value }],\n        pointerEvents: rowState.value === 0 ? 'auto' : 'box-only',\n      }),\n      [appliedTranslation, rowState]\n    );\n\n    const swipeableComponent = (\n      <GestureDetector gesture={panGesture} touchAction=\"pan-y\">\n        <Animated.View\n          {...remainingProps}\n          onLayout={onRowLayout}\n          style={[styles.container, containerStyle]}>\n          {leftElement}\n          {rightElement}\n          <GestureDetector gesture={tapGesture} touchAction=\"pan-y\">\n            <Animated.View style={[animatedStyle, childrenContainerStyle]}>\n              {children}\n            </Animated.View>\n          </GestureDetector>\n        </Animated.View>\n      </GestureDetector>\n    );\n\n    return testID ? (\n      <View testID={testID}>{swipeableComponent}</View>\n    ) : (\n      swipeableComponent\n    );\n  }\n);\n\nexport default Swipeable;\nexport type SwipeableRef = ForwardedRef<SwipeableMethods>;\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]}